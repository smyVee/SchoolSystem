#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SchoolDB")]
	public partial class SchoolDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdministration(Administration instance);
    partial void UpdateAdministration(Administration instance);
    partial void DeleteAdministration(Administration instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertQualification(Qualification instance);
    partial void UpdateQualification(Qualification instance);
    partial void DeleteQualification(Qualification instance);
    partial void InsertQualification_Course(Qualification_Course instance);
    partial void UpdateQualification_Course(Qualification_Course instance);
    partial void DeleteQualification_Course(Qualification_Course instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudent_Course(Student_Course instance);
    partial void UpdateStudent_Course(Student_Course instance);
    partial void DeleteStudent_Course(Student_Course instance);
    #endregion
		
		public SchoolDataClassesDataContext() : 
				base(global::SchoolSystem.Properties.Settings.Default.SchoolDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchoolDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Administration> Administrations
		{
			get
			{
				return this.GetTable<Administration>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Qualification> Qualifications
		{
			get
			{
				return this.GetTable<Qualification>();
			}
		}
		
		public System.Data.Linq.Table<Qualification_Course> Qualification_Courses
		{
			get
			{
				return this.GetTable<Qualification_Course>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Student_Course> Student_Courses
		{
			get
			{
				return this.GetTable<Student_Course>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administration")]
	public partial class Administration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AID;
		
		private string _Role;
		
		private string _Password;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAIDChanging(int value);
    partial void OnAIDChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Administration()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AID
		{
			get
			{
				return this._AID;
			}
			set
			{
				if ((this._AID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAIDChanging(value);
					this.SendPropertyChanging();
					this._AID = value;
					this.SendPropertyChanged("AID");
					this.OnAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(50)")]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(7)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Administration", Storage="_Person", ThisKey="AID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Administration = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Administration = this;
						this._AID = value.ID;
					}
					else
					{
						this._AID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TID;
		
		private string _RegNo;
		
		private string _Password;
		
		private EntitySet<Course> _Courses;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTIDChanging(int value);
    partial void OnTIDChanged();
    partial void OnRegNoChanging(string value);
    partial void OnRegNoChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Teacher()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TID
		{
			get
			{
				return this._TID;
			}
			set
			{
				if ((this._TID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTIDChanging(value);
					this.SendPropertyChanging();
					this._TID = value;
					this.SendPropertyChanged("TID");
					this.OnTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RegNo
		{
			get
			{
				return this._RegNo;
			}
			set
			{
				if ((this._RegNo != value))
				{
					this.OnRegNoChanging(value);
					this.SendPropertyChanging();
					this._RegNo = value;
					this.SendPropertyChanged("RegNo");
					this.OnRegNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Course", Storage="_Courses", ThisKey="TID", OtherKey="TID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Teacher", Storage="_Person", ThisKey="TID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Teacher = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Teacher = this;
						this._TID = value.ID;
					}
					else
					{
						this._TID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private string _CName;
		
		private int _Year;
		
		private string _Semester;
		
		private System.Nullable<int> _TID;
		
		private EntitySet<Qualification_Course> _Qualification_Courses;
		
		private EntitySet<Student_Course> _Student_Courses;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnCNameChanging(string value);
    partial void OnCNameChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnSemesterChanging(string value);
    partial void OnSemesterChanged();
    partial void OnTIDChanging(System.Nullable<int> value);
    partial void OnTIDChanged();
    #endregion
		
		public Course()
		{
			this._Qualification_Courses = new EntitySet<Qualification_Course>(new Action<Qualification_Course>(this.attach_Qualification_Courses), new Action<Qualification_Course>(this.detach_Qualification_Courses));
			this._Student_Courses = new EntitySet<Student_Course>(new Action<Student_Course>(this.attach_Student_Courses), new Action<Student_Course>(this.detach_Student_Courses));
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CName
		{
			get
			{
				return this._CName;
			}
			set
			{
				if ((this._CName != value))
				{
					this.OnCNameChanging(value);
					this.SendPropertyChanging();
					this._CName = value;
					this.SendPropertyChanged("CName");
					this.OnCNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Semester
		{
			get
			{
				return this._Semester;
			}
			set
			{
				if ((this._Semester != value))
				{
					this.OnSemesterChanging(value);
					this.SendPropertyChanging();
					this._Semester = value;
					this.SendPropertyChanged("Semester");
					this.OnSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TID", DbType="Int")]
		public System.Nullable<int> TID
		{
			get
			{
				return this._TID;
			}
			set
			{
				if ((this._TID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTIDChanging(value);
					this.SendPropertyChanging();
					this._TID = value;
					this.SendPropertyChanged("TID");
					this.OnTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Qualification_Course", Storage="_Qualification_Courses", ThisKey="CID", OtherKey="CID")]
		public EntitySet<Qualification_Course> Qualification_Courses
		{
			get
			{
				return this._Qualification_Courses;
			}
			set
			{
				this._Qualification_Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student_Course", Storage="_Student_Courses", ThisKey="CID", OtherKey="CID")]
		public EntitySet<Student_Course> Student_Courses
		{
			get
			{
				return this._Student_Courses;
			}
			set
			{
				this._Student_Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Course", Storage="_Teacher", ThisKey="TID", OtherKey="TID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._TID = value.TID;
					}
					else
					{
						this._TID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Qualification_Courses(Qualification_Course entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Qualification_Courses(Qualification_Course entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Student_Courses(Student_Course entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Student_Courses(Student_Course entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FName;
		
		private string _LName;
		
		private System.DateTime _DOB;
		
		private string _Phone;
		
		private string _Add1;
		
		private string _Add2;
		
		private string _Suburb;
		
		private string _State;
		
		private string _Postcode;
		
		private string _Type;
		
		private EntityRef<Administration> _Administration;
		
		private EntityRef<Teacher> _Teacher;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAdd1Changing(string value);
    partial void OnAdd1Changed();
    partial void OnAdd2Changing(string value);
    partial void OnAdd2Changed();
    partial void OnSuburbChanging(string value);
    partial void OnSuburbChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Person()
		{
			this._Administration = default(EntityRef<Administration>);
			this._Teacher = default(EntityRef<Teacher>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Add1
		{
			get
			{
				return this._Add1;
			}
			set
			{
				if ((this._Add1 != value))
				{
					this.OnAdd1Changing(value);
					this.SendPropertyChanging();
					this._Add1 = value;
					this.SendPropertyChanged("Add1");
					this.OnAdd1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add2", DbType="VarChar(50)")]
		public string Add2
		{
			get
			{
				return this._Add2;
			}
			set
			{
				if ((this._Add2 != value))
				{
					this.OnAdd2Changing(value);
					this.SendPropertyChanging();
					this._Add2 = value;
					this.SendPropertyChanged("Add2");
					this.OnAdd2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suburb", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Suburb
		{
			get
			{
				return this._Suburb;
			}
			set
			{
				if ((this._Suburb != value))
				{
					this.OnSuburbChanging(value);
					this.SendPropertyChanging();
					this._Suburb = value;
					this.SendPropertyChanged("Suburb");
					this.OnSuburbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postcode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Postcode
		{
			get
			{
				return this._Postcode;
			}
			set
			{
				if ((this._Postcode != value))
				{
					this.OnPostcodeChanging(value);
					this.SendPropertyChanging();
					this._Postcode = value;
					this.SendPropertyChanged("Postcode");
					this.OnPostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Administration", Storage="_Administration", ThisKey="ID", OtherKey="AID", IsUnique=true, IsForeignKey=false)]
		public Administration Administration
		{
			get
			{
				return this._Administration.Entity;
			}
			set
			{
				Administration previousValue = this._Administration.Entity;
				if (((previousValue != value) 
							|| (this._Administration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Administration.Entity = null;
						previousValue.Person = null;
					}
					this._Administration.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Administration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Teacher", Storage="_Teacher", ThisKey="ID", OtherKey="TID", IsUnique=true, IsForeignKey=false)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Person = null;
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Student", Storage="_Student", ThisKey="ID", OtherKey="SID", IsUnique=true, IsForeignKey=false)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Person = null;
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Qualification")]
	public partial class Qualification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _QCode;
		
		private string _QName;
		
		private string _Duration;
		
		private EntitySet<Qualification_Course> _Qualification_Courses;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQCodeChanging(string value);
    partial void OnQCodeChanged();
    partial void OnQNameChanging(string value);
    partial void OnQNameChanged();
    partial void OnDurationChanging(string value);
    partial void OnDurationChanged();
    #endregion
		
		public Qualification()
		{
			this._Qualification_Courses = new EntitySet<Qualification_Course>(new Action<Qualification_Course>(this.attach_Qualification_Courses), new Action<Qualification_Course>(this.detach_Qualification_Courses));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QCode
		{
			get
			{
				return this._QCode;
			}
			set
			{
				if ((this._QCode != value))
				{
					this.OnQCodeChanging(value);
					this.SendPropertyChanging();
					this._QCode = value;
					this.SendPropertyChanged("QCode");
					this.OnQCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string QName
		{
			get
			{
				return this._QName;
			}
			set
			{
				if ((this._QName != value))
				{
					this.OnQNameChanging(value);
					this.SendPropertyChanging();
					this._QName = value;
					this.SendPropertyChanged("QName");
					this.OnQNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qualification_Qualification_Course", Storage="_Qualification_Courses", ThisKey="QCode", OtherKey="QCode")]
		public EntitySet<Qualification_Course> Qualification_Courses
		{
			get
			{
				return this._Qualification_Courses;
			}
			set
			{
				this._Qualification_Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qualification_Student", Storage="_Students", ThisKey="QCode", OtherKey="QCode")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Qualification_Courses(Qualification_Course entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = this;
		}
		
		private void detach_Qualification_Courses(Qualification_Course entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Qualification_Course")]
	public partial class Qualification_Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _QCode;
		
		private int _CID;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Qualification> _Qualification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQCodeChanging(string value);
    partial void OnQCodeChanged();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    #endregion
		
		public Qualification_Course()
		{
			this._Course = default(EntityRef<Course>);
			this._Qualification = default(EntityRef<Qualification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QCode
		{
			get
			{
				return this._QCode;
			}
			set
			{
				if ((this._QCode != value))
				{
					if (this._Qualification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQCodeChanging(value);
					this.SendPropertyChanging();
					this._QCode = value;
					this.SendPropertyChanged("QCode");
					this.OnQCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Qualification_Course", Storage="_Course", ThisKey="CID", OtherKey="CID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Qualification_Courses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Qualification_Courses.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qualification_Qualification_Course", Storage="_Qualification", ThisKey="QCode", OtherKey="QCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Qualification Qualification
		{
			get
			{
				return this._Qualification.Entity;
			}
			set
			{
				Qualification previousValue = this._Qualification.Entity;
				if (((previousValue != value) 
							|| (this._Qualification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Qualification.Entity = null;
						previousValue.Qualification_Courses.Remove(this);
					}
					this._Qualification.Entity = value;
					if ((value != null))
					{
						value.Qualification_Courses.Add(this);
						this._QCode = value.QCode;
					}
					else
					{
						this._QCode = default(string);
					}
					this.SendPropertyChanged("Qualification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SID;
		
		private System.DateTime _Sdate;
		
		private string _QCode;
		
		private EntitySet<Student_Course> _Student_Courses;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Qualification> _Qualification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSIDChanging(int value);
    partial void OnSIDChanged();
    partial void OnSdateChanging(System.DateTime value);
    partial void OnSdateChanged();
    partial void OnQCodeChanging(string value);
    partial void OnQCodeChanged();
    #endregion
		
		public Student()
		{
			this._Student_Courses = new EntitySet<Student_Course>(new Action<Student_Course>(this.attach_Student_Courses), new Action<Student_Course>(this.detach_Student_Courses));
			this._Person = default(EntityRef<Person>);
			this._Qualification = default(EntityRef<Qualification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sdate", DbType="DateTime NOT NULL")]
		public System.DateTime Sdate
		{
			get
			{
				return this._Sdate;
			}
			set
			{
				if ((this._Sdate != value))
				{
					this.OnSdateChanging(value);
					this.SendPropertyChanging();
					this._Sdate = value;
					this.SendPropertyChanged("Sdate");
					this.OnSdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string QCode
		{
			get
			{
				return this._QCode;
			}
			set
			{
				if ((this._QCode != value))
				{
					if (this._Qualification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQCodeChanging(value);
					this.SendPropertyChanging();
					this._QCode = value;
					this.SendPropertyChanged("QCode");
					this.OnQCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student_Course", Storage="_Student_Courses", ThisKey="SID", OtherKey="SID")]
		public EntitySet<Student_Course> Student_Courses
		{
			get
			{
				return this._Student_Courses;
			}
			set
			{
				this._Student_Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Student", Storage="_Person", ThisKey="SID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Student = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Student = this;
						this._SID = value.ID;
					}
					else
					{
						this._SID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qualification_Student", Storage="_Qualification", ThisKey="QCode", OtherKey="QCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Qualification Qualification
		{
			get
			{
				return this._Qualification.Entity;
			}
			set
			{
				Qualification previousValue = this._Qualification.Entity;
				if (((previousValue != value) 
							|| (this._Qualification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Qualification.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Qualification.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._QCode = value.QCode;
					}
					else
					{
						this._QCode = default(string);
					}
					this.SendPropertyChanged("Qualification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student_Courses(Student_Course entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Student_Courses(Student_Course entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_Course")]
	public partial class Student_Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SID;
		
		private int _CID;
		
		private int _Mark;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSIDChanging(int value);
    partial void OnSIDChanged();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnMarkChanging(int value);
    partial void OnMarkChanged();
    #endregion
		
		public Student_Course()
		{
			this._Course = default(EntityRef<Course>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SID
		{
			get
			{
				return this._SID;
			}
			set
			{
				if ((this._SID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSIDChanging(value);
					this.SendPropertyChanging();
					this._SID = value;
					this.SendPropertyChanged("SID");
					this.OnSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Int NOT NULL")]
		public int Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student_Course", Storage="_Course", ThisKey="CID", OtherKey="CID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Student_Courses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Student_Courses.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student_Course", Storage="_Student", ThisKey="SID", OtherKey="SID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Student_Courses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Student_Courses.Add(this);
						this._SID = value.SID;
					}
					else
					{
						this._SID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
